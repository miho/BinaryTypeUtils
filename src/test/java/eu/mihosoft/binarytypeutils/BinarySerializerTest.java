/*
 * Copyright 2019-2022 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eu.mihosoft.binarytypeutils;

import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteOrder;
import java.nio.charset.StandardCharsets;

public class BinarySerializerTest {
    @Test
    public void testUbyteSerialization() {
        var bos = new ByteArrayOutputStream();
        var serializer = BinarySerializer.newInstance(bos, ByteOrder.BIG_ENDIAN);

        // should fail (out of range)
        try {
            serializer.writeValue(BinaryType.UBYTE, -3);
            Assert.fail("Exception expected!");
        } catch(RuntimeException ex) {
            ex.printStackTrace();
        }

        // should fail (out of range)
        try {
            serializer.writeValue(BinaryType.UBYTE, 256);
            Assert.fail("Exception expected!");
        } catch(RuntimeException ex) {
            ex.printStackTrace();
        }

        // should work (in range)
        try {
            serializer.writeValue(BinaryType.UBYTE, 255);
        } catch(RuntimeException ex) {
            ex.printStackTrace();
            Assert.fail("No exception expected!");
        }

        var actual = bos.toByteArray();
        var expected = new byte[]{(byte)255};
        Assert.assertArrayEquals(expected, actual);
    }
}
